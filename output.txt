CONSTTK const
INTTK int
IDENFR CHOU
ASSIGN =
INTCON 114514
SEMICN ;
CONSTTK const
CHARTK char
IDENFR CHAR_ADD
ASSIGN =
CHARCON +
COMMA ,
IDENFR CHAR_MUL
ASSIGN =
CHARCON *
COMMA ,
IDENFR CHAR_ALPHA
ASSIGN =
CHARCON a
COMMA ,
IDENFR CHAR_NUM
ASSIGN =
CHARCON 1
SEMICN ;
VOIDTK void
IDENFR printMyCode
LPARENT (
INTTK int
IDENFR canPrint
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR canPrint
EQL ==
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON 18373580
RPARENT )
SEMICN ;
RBRACE }
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR printLeave
LPARENT (
INTTK int
IDENFR timeOfCicle
RPARENT )
LBRACE {
INTTK int
IDENFR count
SEMICN ;
IDENFR count
ASSIGN =
IDENFR timeOfCicle
SEMICN ;
WHILETK while
LPARENT (
IDENFR count
GRE >
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON 18373580
RPARENT )
SEMICN ;
IDENFR count
ASSIGN =
IDENFR count
MINU -
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR matrix1_m
COMMA ,
IDENFR matrix1_n
COMMA ,
IDENFR matrix2_m
COMMA ,
IDENFR matrix2_n
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
COMMA ,
IDENFR t
SEMICN ;
INTTK int
IDENFR tempForScanf
SEMICN ;
INTTK int
IDENFR matrix_a
LBRACK [
INTCON 4
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
COMMA ,
IDENFR matrix_b
LBRACK [
INTCON 4
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
SEMICN ;
INTTK int
IDENFR answer
LBRACK [
INTCON 4
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
PLUS +
INTCON 0
COMMA ,
MINU -
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
PLUS +
INTCON 0
COMMA ,
MINU -
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
PLUS +
INTCON 0
COMMA ,
MINU -
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
PLUS +
INTCON 0
COMMA ,
MINU -
INTCON 0
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR maxAnswerOfAll
ASSIGN =
INTCON 0
SEMICN ;
IDENFR printMyCode
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR matrix1_m
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR matrix1_n
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR matrix2_m
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR matrix2_n
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR matrix1_m
GRE >
INTCON 4
RPARENT )
LBRACE {
IDENFR printLeave
LPARENT (
INTCON 9
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR matrix1_m
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
LSS <
IDENFR matrix1_n
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
RPARENT )
LBRACE {
SCANFTK scanf
LPARENT (
IDENFR tempForScanf
RPARENT )
SEMICN ;
IDENFR matrix_a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR tempForScanf
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR matrix2_m
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
LSS <
IDENFR matrix2_n
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
RPARENT )
LBRACE {
SCANFTK scanf
LPARENT (
IDENFR tempForScanf
RPARENT )
SEMICN ;
IDENFR matrix_b
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR tempForScanf
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR matrix1_m
MINU -
IDENFR matrix2_m
PLUS +
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
LSS <
IDENFR matrix1_n
MINU -
IDENFR matrix2_n
PLUS +
INTCON 1
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR k
ASSIGN =
INTCON 0
SEMICN ;
IDENFR k
LSS <
IDENFR matrix2_m
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR t
ASSIGN =
INTCON 0
SEMICN ;
IDENFR t
LSS <
IDENFR matrix2_n
SEMICN ;
IDENFR t
ASSIGN =
IDENFR t
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR answer
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR answer
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
PLUS +
IDENFR matrix_a
LBRACK [
IDENFR i
PLUS +
IDENFR k
RBRACK ]
LBRACK [
IDENFR j
PLUS +
IDENFR t
RBRACK ]
MULT *
IDENFR matrix_b
LBRACK [
IDENFR k
RBRACK ]
LBRACK [
IDENFR t
RBRACK ]
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
RBRACE }
IDENFR tempForScanf
ASSIGN =
IDENFR answer
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON answer[0][0] is 
COMMA ,
IDENFR tempForScanf
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 4
SEMICN ;
IDENFR i
GRE >
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
RPARENT )
LBRACE {
IDENFR printMyCode
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
IDENFR printLeave
LPARENT (
INTCON 4
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
